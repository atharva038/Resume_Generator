import {useState, useEffect} from "react";
import {useLocation, useNavigate} from "react-router-dom";
import {useAuth} from "../context/AuthContext";
import {resumeAPI} from "../services/api";
import ResumePreview from "../components/ResumePreview";
import EditableSection from "../components/EditableSection";
import ScoreCard from "../components/ScoreCard";
import RecommendationsPanel from "../components/RecommendationsPanel";
import CollapsibleSection from "../components/CollapsibleSection";

// Default section order
const DEFAULT_SECTION_ORDER = [
  "score",
  "personal",
  "summary",
  "recommendations",
  "skills",
  "experience",
  "education",
  "projects",
  "certifications",
];

const Editor = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const {user} = useAuth();
  const [resumeData, setResumeData] = useState(null);
  const [saving, setSaving] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState("classic");
  const [sectionOrder, setSectionOrder] = useState(() => {
    // Load section order from localStorage or use default
    const saved = localStorage.getItem("resumeSectionOrder");
    return saved ? JSON.parse(saved) : DEFAULT_SECTION_ORDER;
  });
  const [draggedSection, setDraggedSection] = useState(null);

  useEffect(() => {
    const data = location.state?.resumeData;
    if (!data) {
      navigate("/upload");
      return;
    }
    setResumeData(data);
  }, [location, navigate]);

  const handleSave = async () => {
    if (!user) {
      alert("Please login to save your resume");
      navigate("/login");
      return;
    }

    setSaving(true);
    try {
      if (resumeData._id) {
        await resumeAPI.update(resumeData._id, resumeData);
        alert("Resume updated successfully!");
      } else {
        await resumeAPI.save(resumeData);
        alert("Resume saved successfully!");
      }
    } catch (err) {
      alert(
        "Failed to save resume: " + (err.response?.data?.error || err.message)
      );
    } finally {
      setSaving(false);
    }
  };

  const updateField = (field, value) => {
    setResumeData((prev) => ({...prev, [field]: value}));
  };

  const updateContact = (field, value) => {
    setResumeData((prev) => ({
      ...prev,
      contact: {...prev.contact, [field]: value},
    }));
  };

  const updateArrayItem = (section, index, field, value) => {
    setResumeData((prev) => {
      const newArray = [...prev[section]];
      newArray[index] = {...newArray[index], [field]: value};
      return {...prev, [section]: newArray};
    });
  };

  const addArrayItem = (section, template) => {
    setResumeData((prev) => ({
      ...prev,
      [section]: [...(prev[section] || []), template],
    }));
  };

  const removeArrayItem = (section, index) => {
    setResumeData((prev) => ({
      ...prev,
      [section]: prev[section].filter((_, i) => i !== index),
    }));
  };

  const moveItem = (section, fromIndex, toIndex) => {
    setResumeData((prev) => {
      const newArray = [...prev[section]];
      const [moved] = newArray.splice(fromIndex, 1);
      newArray.splice(toIndex, 0, moved);
      return {...prev, [section]: newArray};
    });
  };

  // Drag and drop handlers for sections
  const handleDragStart = (e, sectionId) => {
    setDraggedSection(sectionId);
    e.dataTransfer.effectAllowed = "move";
  };

  const handleDragEnd = () => {
    setDraggedSection(null);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = "move";
  };

  const handleDrop = (e, targetSectionId) => {
    e.preventDefault();
    
    if (draggedSection && draggedSection !== targetSectionId) {
      const newOrder = [...sectionOrder];
      const draggedIndex = newOrder.indexOf(draggedSection);
      const targetIndex = newOrder.indexOf(targetSectionId);
      
      // Remove dragged item and insert at target position
      newOrder.splice(draggedIndex, 1);
      newOrder.splice(targetIndex, 0, draggedSection);
      
      setSectionOrder(newOrder);
      // Save to localStorage
      localStorage.setItem("resumeSectionOrder", JSON.stringify(newOrder));
      
      // Also update resumeData with section order for templates
      setResumeData((prev) => ({
        ...prev,
        sectionOrder: newOrder,
      }));
    }
    
    setDraggedSection(null);
  };

  // Reset section order to default
  const handleResetOrder = () => {
    if (window.confirm("Reset section order to default? This cannot be undone.")) {
      setSectionOrder(DEFAULT_SECTION_ORDER);
      localStorage.removeItem("resumeSectionOrder");
      setResumeData((prev) => ({
        ...prev,
        sectionOrder: DEFAULT_SECTION_ORDER,
      }));
      alert("Section order reset to default!");
    }
  };

  if (!resumeData) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        <p>Loading...</p>
      </div>
    );
  }

  // Render section based on section ID
  const renderSection = (sectionId) => {
    const sections = {
      score: (
        <CollapsibleSection
          key="score"
          sectionId="score"
          title="ATS Score"
          icon="📊"
          defaultExpanded={true}
          onDragStart={handleDragStart}
          onDragEnd={handleDragEnd}
          onDragOver={handleDragOver}
          onDrop={handleDrop}
          isDragging={draggedSection === "score"}
        >
          <div className="-m-6">
            <ScoreCard resumeData={resumeData} expanded={false} />
          </div>
        </CollapsibleSection>
      ),

      personal: (
        <CollapsibleSection
          key="personal"
          sectionId="personal"
          title="Personal Information"
          icon="👤"
          defaultExpanded={true}
          onDragStart={handleDragStart}
          onDragEnd={handleDragEnd}
          onDragOver={handleDragOver}
          onDrop={handleDrop}
          isDragging={draggedSection === "personal"}
        >
          <div className="space-y-3">
            <input
              type="text"
              value={resumeData.name || ""}
              onChange={(e) => updateField("name", e.target.value)}
              placeholder="Full Name"
              className="input-field font-semibold text-lg"
            />
            <div className="grid grid-cols-2 gap-3">
              <input
                type="email"
                value={resumeData.contact?.email || ""}
                onChange={(e) => updateContact("email", e.target.value)}
                placeholder="Email"
                className="input-field"
              />
              <input
                type="tel"
                value={resumeData.contact?.phone || ""}
                onChange={(e) => updateContact("phone", e.target.value)}
                placeholder="Phone"
                className="input-field"
              />
            </div>
            <input
              type="text"
              value={resumeData.contact?.location || ""}
              onChange={(e) => updateContact("location", e.target.value)}
              placeholder="Location"
              className="input-field"
            />
            <div className="grid grid-cols-2 gap-3">
              <input
                type="url"
                value={resumeData.contact?.linkedin || ""}
                onChange={(e) => updateContact("linkedin", e.target.value)}
                placeholder="LinkedIn URL"
                className="input-field"
              />
              <input
                type="url"
                value={resumeData.contact?.github || ""}
                onChange={(e) => updateContact("github", e.target.value)}
                placeholder="GitHub URL"
                className="input-field"
              />
            </div>
          </div>
        </CollapsibleSection>
      ),

      summary: (
        <CollapsibleSection
          key="summary"
          sectionId="summary"
          title="Professional Summary"
          icon="📝"
          defaultExpanded={true}
          onDragStart={handleDragStart}
          onDragEnd={handleDragEnd}
          onDragOver={handleDragOver}
          onDrop={handleDrop}
          isDragging={draggedSection === "summary"}
        >
          <div className="-m-6">
            <EditableSection
              title=""
              content={resumeData.summary}
              onUpdate={(value) => updateField("summary", value)}
              sectionType="summary"
              resumeData={resumeData}
            />
          </div>
        </CollapsibleSection>
      ),

      recommendations: (
        <CollapsibleSection
          key="recommendations"
          sectionId="recommendations"
          title="Improvement Recommendations"
          icon="💡"
          defaultExpanded={false}
          onDragStart={handleDragStart}
          onDragEnd={handleDragEnd}
          onDragOver={handleDragOver}
          onDrop={handleDrop}
          isDragging={draggedSection === "recommendations"}
        >
          <div className="-m-6">
            <RecommendationsPanel resumeData={resumeData} />
          </div>
        </CollapsibleSection>
      ),
    };

    return sections[sectionId] || null;
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-6 no-print">
          <h1 className="text-3xl font-bold">Resume Editor</h1>
          <div className="flex gap-3 items-center">
            {/* Reset Order Button */}
            <button
              onClick={handleResetOrder}
              className="px-4 py-2 border border-gray-300 rounded-lg bg-white text-sm font-medium hover:border-orange-500 hover:text-orange-600 focus:outline-none focus:ring-2 focus:ring-orange-500 transition-colors"
              title="Reset section order to default"
            >
              🔄 Reset Order
            </button>
            {/* Template Selector */}
            <select
              value={selectedTemplate}
              onChange={(e) => setSelectedTemplate(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg bg-white text-sm font-medium hover:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <option value="classic">📋 Classic</option>
              <option value="modern">🎨 Modern</option>
              <option value="minimal">✨ Minimal</option>
              <option value="professional">💼 Professional</option>
            </select>
            <button
              onClick={() => setShowPreview(!showPreview)}
              className="btn-secondary"
            >
              {showPreview ? "Hide" : "Show"} Preview
            </button>
            <button
              onClick={handleSave}
              disabled={saving}
              className="btn-primary"
            >
              {saving ? "Saving..." : "Save Resume"}
            </button>
          </div>
        </div>

        {/* Info Banner */}
        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center gap-2 text-sm text-blue-800">
            <span className="text-lg">💡</span>
            <span>
              <strong>Tip:</strong> Click section headers to collapse/expand. Drag sections to reorder them. Your resume preview will update automatically!
            </span>
          </div>
        </div>

        <div
          className={`grid ${
            showPreview ? "lg:grid-cols-2" : "lg:grid-cols-1"
          } gap-6`}
        >
          {/* Editor Panel */}
          <div className="space-y-6">
            {/* ATS Score Card - Always visible at top */}
            <ScoreCard resumeData={resumeData} expanded={false} />

            {/* Personal Info */}
            <div className="card p-6">
              <h2 className="section-title">Personal Information</h2>
              <div className="space-y-3">
                <input
                  type="text"
                  value={resumeData.name || ""}
                  onChange={(e) => updateField("name", e.target.value)}
                  placeholder="Full Name"
                  className="input-field font-semibold text-lg"
                />
                <div className="grid grid-cols-2 gap-3">
                  <input
                    type="email"
                    value={resumeData.contact?.email || ""}
                    onChange={(e) => updateContact("email", e.target.value)}
                    placeholder="Email"
                    className="input-field"
                  />
                  <input
                    type="tel"
                    value={resumeData.contact?.phone || ""}
                    onChange={(e) => updateContact("phone", e.target.value)}
                    placeholder="Phone"
                    className="input-field"
                  />
                </div>
                <input
                  type="text"
                  value={resumeData.contact?.location || ""}
                  onChange={(e) => updateContact("location", e.target.value)}
                  placeholder="Location"
                  className="input-field"
                />
                <div className="grid grid-cols-2 gap-3">
                  <input
                    type="url"
                    value={resumeData.contact?.linkedin || ""}
                    onChange={(e) => updateContact("linkedin", e.target.value)}
                    placeholder="LinkedIn URL"
                    className="input-field"
                  />
                  <input
                    type="url"
                    value={resumeData.contact?.github || ""}
                    onChange={(e) => updateContact("github", e.target.value)}
                    placeholder="GitHub URL"
                    className="input-field"
                  />
                </div>
              </div>
            </div>

            {/* Summary */}
            <EditableSection
              title="Professional Summary"
              content={resumeData.summary}
              onUpdate={(value) => updateField("summary", value)}
              sectionType="summary"
              resumeData={resumeData}
            />

            {/* Recommendations Panel */}
            <RecommendationsPanel resumeData={resumeData} />

            {/* Skills */}
            <div className="card p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="section-title mb-0">Skills</h2>
                <button
                  onClick={() =>
                    addArrayItem("skills", {
                      category: "Technical Skills",
                      items: [],
                    })
                  }
                  className="text-primary-600 hover:text-primary-700 font-medium"
                >
                  + Add Category
                </button>
              </div>
              {resumeData.skills?.map((skillGroup, index) => (
                <div
                  key={index}
                  className="mb-4 p-3 border border-gray-200 rounded"
                >
                  <div className="flex gap-2 mb-2">
                    <input
                      type="text"
                      value={skillGroup.category}
                      onChange={(e) =>
                        updateArrayItem(
                          "skills",
                          index,
                          "category",
                          e.target.value
                        )
                      }
                      placeholder="Category"
                      className="input-field flex-1"
                    />
                    <button
                      onClick={() => removeArrayItem("skills", index)}
                      className="text-red-600 hover:text-red-700 px-2"
                    >
                      ✕
                    </button>
                  </div>
                  <input
                    type="text"
                    value={skillGroup.items?.join(", ") || ""}
                    onChange={(e) =>
                      updateArrayItem(
                        "skills",
                        index,
                        "items",
                        e.target.value.split(",").map((s) => s.trim())
                      )
                    }
                    placeholder="Skills (comma-separated)"
                    className="input-field"
                  />
                </div>
              ))}
            </div>

            {/* Experience */}
            <div className="card p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="section-title mb-0">Experience</h2>
                <button
                  onClick={() =>
                    addArrayItem("experience", {
                      company: "",
                      title: "",
                      location: "",
                      startDate: "",
                      endDate: "",
                      current: false,
                      bullets: [""],
                    })
                  }
                  className="text-primary-600 hover:text-primary-700 font-medium"
                >
                  + Add Experience
                </button>
              </div>
              {resumeData.experience?.map((exp, index) => (
                <EditableSection
                  key={index}
                  title={`${exp.title || "Position"} at ${
                    exp.company || "Company"
                  }`}
                  content={exp}
                  onUpdate={(value) =>
                    updateArrayItem("experience", index, "bullets", value)
                  }
                  onRemove={() => removeArrayItem("experience", index)}
                  onMoveUp={
                    index > 0
                      ? () => moveItem("experience", index, index - 1)
                      : null
                  }
                  onMoveDown={
                    index < resumeData.experience.length - 1
                      ? () => moveItem("experience", index, index + 1)
                      : null
                  }
                  sectionType="experience"
                  resumeData={resumeData}
                  experienceData={exp}
                  onUpdateExperience={(field, value) =>
                    updateArrayItem("experience", index, field, value)
                  }
                />
              ))}
            </div>

            {/* Education */}
            <div className="card p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="section-title mb-0">Education</h2>
                <button
                  onClick={() =>
                    addArrayItem("education", {
                      institution: "",
                      degree: "",
                      field: "",
                      location: "",
                      startDate: "",
                      endDate: "",
                      gpa: "",
                      bullets: [],
                    })
                  }
                  className="text-primary-600 hover:text-primary-700 font-medium"
                >
                  + Add Education
                </button>
              </div>
              {resumeData.education?.map((edu, index) => (
                <div
                  key={index}
                  className="mb-4 p-4 border border-gray-200 rounded"
                >
                  <div className="flex justify-between mb-3">
                    <div className="flex gap-2">
                      {index > 0 && (
                        <button
                          onClick={() =>
                            moveItem("education", index, index - 1)
                          }
                          className="text-gray-400 hover:text-gray-600"
                        >
                          ↑
                        </button>
                      )}
                      {index < resumeData.education.length - 1 && (
                        <button
                          onClick={() =>
                            moveItem("education", index, index + 1)
                          }
                          className="text-gray-400 hover:text-gray-600"
                        >
                          ↓
                        </button>
                      )}
                    </div>
                    <button
                      onClick={() => removeArrayItem("education", index)}
                      className="text-red-600 hover:text-red-700"
                    >
                      Remove
                    </button>
                  </div>
                  <div className="space-y-2">
                    <input
                      type="text"
                      value={edu.institution}
                      onChange={(e) =>
                        updateArrayItem(
                          "education",
                          index,
                          "institution",
                          e.target.value
                        )
                      }
                      placeholder="Institution"
                      className="input-field"
                    />
                    <div className="grid grid-cols-2 gap-2">
                      <input
                        type="text"
                        value={edu.degree}
                        onChange={(e) =>
                          updateArrayItem(
                            "education",
                            index,
                            "degree",
                            e.target.value
                          )
                        }
                        placeholder="Degree"
                        className="input-field"
                      />
                      <input
                        type="text"
                        value={edu.field}
                        onChange={(e) =>
                          updateArrayItem(
                            "education",
                            index,
                            "field",
                            e.target.value
                          )
                        }
                        placeholder="Field of Study"
                        className="input-field"
                      />
                    </div>
                    <div className="grid grid-cols-3 gap-2">
                      <input
                        type="text"
                        value={edu.startDate}
                        onChange={(e) =>
                          updateArrayItem(
                            "education",
                            index,
                            "startDate",
                            e.target.value
                          )
                        }
                        placeholder="Start Date"
                        className="input-field"
                      />
                      <input
                        type="text"
                        value={edu.endDate}
                        onChange={(e) =>
                          updateArrayItem(
                            "education",
                            index,
                            "endDate",
                            e.target.value
                          )
                        }
                        placeholder="End Date"
                        className="input-field"
                      />
                      <input
                        type="text"
                        value={edu.gpa || ""}
                        onChange={(e) =>
                          updateArrayItem(
                            "education",
                            index,
                            "gpa",
                            e.target.value
                          )
                        }
                        placeholder="GPA"
                        className="input-field"
                      />
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* Projects */}
            <div className="card p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="section-title mb-0">Projects</h2>
                <button
                  onClick={() =>
                    addArrayItem("projects", {
                      name: "",
                      description: "",
                      technologies: [],
                      link: "",
                      bullets: [""],
                    })
                  }
                  className="text-primary-600 hover:text-primary-700 font-medium"
                >
                  + Add Project
                </button>
              </div>
              {resumeData.projects?.map((project, index) => (
                <EditableSection
                  key={index}
                  title={project.name || `Project ${index + 1}`}
                  content={project}
                  onUpdate={(value) =>
                    updateArrayItem("projects", index, "bullets", value)
                  }
                  onRemove={() => removeArrayItem("projects", index)}
                  onMoveUp={
                    index > 0
                      ? () => moveItem("projects", index, index - 1)
                      : null
                  }
                  onMoveDown={
                    index < resumeData.projects.length - 1
                      ? () => moveItem("projects", index, index + 1)
                      : null
                  }
                  sectionType="project"
                  resumeData={resumeData}
                  projectData={project}
                  onUpdateProject={(field, value) =>
                    updateArrayItem("projects", index, field, value)
                  }
                />
              ))}
            </div>
          </div>

          {/* Preview Panel */}
          {showPreview && (
            <div
              className="lg:sticky lg:top-4"
              style={{height: "calc(100vh - 6rem)"}}
            >
              <ResumePreview
                resumeData={resumeData}
                template={selectedTemplate}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Editor;
